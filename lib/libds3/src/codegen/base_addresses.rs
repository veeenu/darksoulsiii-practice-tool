// **********************************
// *** AUTOGENERATED, DO NOT EDIT ***
// **********************************
#[derive(Debug)]
pub struct BaseAddresses {
    pub world_chr_man: usize,
    pub world_chr_man_dbg: usize,
    pub menu_man: usize,
    pub base_a: usize,
    pub base_d: usize,
    pub sprj_debug_event: usize,
    pub debug: usize,
    pub grend: usize,
    pub base_hbd: usize,
    pub map_item_man: usize,
    pub spawn_item_func_ptr: usize,
    pub param: usize,
    pub format_string: usize,
    pub xa: usize,
}

impl BaseAddresses {
    pub fn with_module_base_addr(self, base: usize) -> BaseAddresses {
        BaseAddresses {
            world_chr_man: self.world_chr_man + base,
            world_chr_man_dbg: self.world_chr_man_dbg + base,
            menu_man: self.menu_man + base,
            base_a: self.base_a + base,
            base_d: self.base_d + base,
            sprj_debug_event: self.sprj_debug_event + base,
            debug: self.debug + base,
            grend: self.grend + base,
            base_hbd: self.base_hbd + base,
            map_item_man: self.map_item_man + base,
            spawn_item_func_ptr: self.spawn_item_func_ptr + base,
            param: self.param + base,
            format_string: self.format_string + base,
            xa: self.xa,
        }
    }
}

#[derive(Clone, Copy)]
pub enum Version {
    V1_08_0,
    V1_09_0,
    V1_10_0,
    V1_11_0,
    V1_12_0,
    V1_13_0,
    V1_14_0,
    V1_15_0,
    V1_15_1,
}

impl From<(u32, u32, u32)> for Version {
    fn from(v: (u32, u32, u32)) -> Self {
        match v {
            (1, 8, 0) => Version::V1_08_0,
            (1, 9, 0) => Version::V1_09_0,
            (1, 10, 0) => Version::V1_10_0,
            (1, 11, 0) => Version::V1_11_0,
            (1, 12, 0) => Version::V1_12_0,
            (1, 13, 0) => Version::V1_13_0,
            (1, 14, 0) => Version::V1_14_0,
            (1, 15, 0) => Version::V1_15_0,
            (1, 15, 1) => Version::V1_15_1,
            (maj, min, patch) => {
                log::error!("Unrecognized version {maj}.{min:02}.{patch}");
                panic!()
            }
        }
    }
}

impl From<Version> for (u32, u32, u32) {
    fn from(v: Version) -> Self {
        match v {
            Version::V1_08_0 => (1, 8, 0),
            Version::V1_09_0 => (1, 9, 0),
            Version::V1_10_0 => (1, 10, 0),
            Version::V1_11_0 => (1, 11, 0),
            Version::V1_12_0 => (1, 12, 0),
            Version::V1_13_0 => (1, 13, 0),
            Version::V1_14_0 => (1, 14, 0),
            Version::V1_15_0 => (1, 15, 0),
            Version::V1_15_1 => (1, 15, 1),
        }
    }
}

impl From<Version> for BaseAddresses {
    fn from(v: Version) -> Self {
        match v {
            Version::V1_08_0 => BASE_ADDRESSES_1_08_0,
            Version::V1_09_0 => BASE_ADDRESSES_1_09_0,
            Version::V1_10_0 => BASE_ADDRESSES_1_10_0,
            Version::V1_11_0 => BASE_ADDRESSES_1_11_0,
            Version::V1_12_0 => BASE_ADDRESSES_1_12_0,
            Version::V1_13_0 => BASE_ADDRESSES_1_13_0,
            Version::V1_14_0 => BASE_ADDRESSES_1_14_0,
            Version::V1_15_0 => BASE_ADDRESSES_1_15_0,
            Version::V1_15_1 => BASE_ADDRESSES_1_15_1,
        }
    }
}

pub const BASE_ADDRESSES_1_08_0: BaseAddresses = BaseAddresses {
    base_a: 0x4704268,
    base_d: 0x4707b58,
    base_hbd: 0x472ac60,
    debug: 0x472d049,
    grend: 0x451b608,
    map_item_man: 0x4703df8,
    menu_man: 0x47103d8,
    param: 0x4749dd0,
    spawn_item_func_ptr: 0x7b6230,
    sprj_debug_event: 0x46fee88,
    world_chr_man: 0x472cf58,
    world_chr_man_dbg: 0x472d078,
    format_string: 0x2952940,
    xa: 0x1f80,
};

pub const BASE_ADDRESSES_1_09_0: BaseAddresses = BaseAddresses {
    base_a: 0x47043a8,
    base_d: 0x4707c98,
    base_hbd: 0x472ada0,
    debug: 0x472d189,
    grend: 0x451b608,
    map_item_man: 0x4703f38,
    menu_man: 0x4710518,
    param: 0x4749f10,
    spawn_item_func_ptr: 0x7b6230,
    sprj_debug_event: 0x46fefc8,
    world_chr_man: 0x472d098,
    world_chr_man_dbg: 0x472d1b8,
    format_string: 0x2952670,
    xa: 0x1f80,
};

pub const BASE_ADDRESSES_1_10_0: BaseAddresses = BaseAddresses {
    base_a: 0x47043a8,
    base_d: 0x4707c98,
    base_hbd: 0x472ada0,
    debug: 0x472d189,
    grend: 0x451b608,
    map_item_man: 0x4703f38,
    menu_man: 0x4710518,
    param: 0x4749f10,
    spawn_item_func_ptr: 0x7b6230,
    sprj_debug_event: 0x46fefc8,
    world_chr_man: 0x472d098,
    world_chr_man_dbg: 0x472d1b8,
    format_string: 0x2952670,
    xa: 0x1f80,
};

pub const BASE_ADDRESSES_1_11_0: BaseAddresses = BaseAddresses {
    base_a: 0x4737698,
    base_d: 0x473afa0,
    base_hbd: 0x475e0a0,
    debug: 0x4760488,
    grend: 0x454dce0,
    map_item_man: 0x4749820,
    menu_man: 0x4743808,
    param: 0x477d4d0,
    spawn_item_func_ptr: 0x7bafc0,
    sprj_debug_event: 0x4732298,
    world_chr_man: 0x4760398,
    world_chr_man_dbg: 0x47604b8,
    format_string: 0x297ae40,
    xa: 0x1f88,
};

pub const BASE_ADDRESSES_1_12_0: BaseAddresses = BaseAddresses {
    base_a: 0x473a818,
    base_d: 0x473e120,
    base_hbd: 0x4761220,
    debug: 0x4763608,
    grend: 0x4550cf0,
    map_item_man: 0x474c9a0,
    menu_man: 0x4746988,
    param: 0x4780660,
    spawn_item_func_ptr: 0x7bb750,
    sprj_debug_event: 0x4735418,
    world_chr_man: 0x4763518,
    world_chr_man_dbg: 0x4763638,
    format_string: 0x297d2e0,
    xa: 0x1f88,
};

pub const BASE_ADDRESSES_1_13_0: BaseAddresses = BaseAddresses {
    base_a: 0x473e018,
    base_d: 0x4741920,
    base_hbd: 0x4764a20,
    debug: 0x4766e08,
    grend: 0x4553cf0,
    map_item_man: 0x47501a0,
    menu_man: 0x474a188,
    param: 0x4783e80,
    spawn_item_func_ptr: 0x7bb940,
    sprj_debug_event: 0x4738c18,
    world_chr_man: 0x4766d18,
    world_chr_man_dbg: 0x4766e38,
    format_string: 0x297f9f0,
    xa: 0x1f90,
};

pub const BASE_ADDRESSES_1_14_0: BaseAddresses = BaseAddresses {
    base_a: 0x4740178,
    base_d: 0x4743a80,
    base_hbd: 0x4766b80,
    debug: 0x4768f68,
    grend: 0x4555cf0,
    map_item_man: 0x4752300,
    menu_man: 0x474c2e8,
    param: 0x4785fe0,
    spawn_item_func_ptr: 0x7bba30,
    sprj_debug_event: 0x473ad78,
    world_chr_man: 0x4768e78,
    world_chr_man_dbg: 0x4768f98,
    format_string: 0x2980a00,
    xa: 0x1f90,
};

pub const BASE_ADDRESSES_1_15_0: BaseAddresses = BaseAddresses {
    base_a: 0x4740178,
    base_d: 0x4743a80,
    base_hbd: 0x4766b80,
    debug: 0x4768f68,
    grend: 0x4555cf0,
    map_item_man: 0x4752300,
    menu_man: 0x474c2e8,
    param: 0x4785fe0,
    spawn_item_func_ptr: 0x7bba70,
    sprj_debug_event: 0x473ad78,
    world_chr_man: 0x4768e78,
    world_chr_man_dbg: 0x4768f98,
    format_string: 0x2980a30,
    xa: 0x1f90,
};

pub const BASE_ADDRESSES_1_15_1: BaseAddresses = BaseAddresses {
    base_a: 0x47572b8,
    base_d: 0x475abd0,
    base_hbd: 0x477dac0,
    debug: 0x477fea8,
    grend: 0x456cba8,
    map_item_man: 0x4769240,
    menu_man: 0x4763258,
    param: 0x479b8c0,
    spawn_item_func_ptr: 0x7c3cd0,
    sprj_debug_event: 0x4751eb8,
    world_chr_man: 0x477fdb8,
    world_chr_man_dbg: 0x477fed8,
    format_string: 0x2991650,
    xa: 0x1f90,
};

